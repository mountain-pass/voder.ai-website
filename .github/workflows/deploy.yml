name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run verification pipeline
        run: npm run verify

      - name: Run screenshot tests
        run: npm run screenshots

      - name: Build for production
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/

  # Wait for all required workflows to complete before deploying
  check-required-workflows:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for CI & Playwright Tests
        uses: fountainhead/action-wait-for-check@v1.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: CI & Playwright multi-browser tests
          ref: ${{ github.sha }}
          timeoutSeconds: 1800
      - name: Wait for Security Audit
        uses: fountainhead/action-wait-for-check@v1.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Security Audit
          ref: ${{ github.sha }}
          timeoutSeconds: 600
      - name: Wait for Secret Scan
        uses: fountainhead/action-wait-for-check@v1.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Secret Scan (gitleaks)
          ref: ${{ github.sha }}
          timeoutSeconds: 600

  deploy-to-vercel:
    needs: check-required-workflows
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "ÔøΩ Starting deployment to production..."
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment completed: $DEPLOYMENT_URL"

      - name: Verify Deployment Success
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "ÔøΩ Verifying deployment success..."
          # Get the latest deployment
          DEPLOYMENT_URL=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | head -n 2 | tail -n 1 | awk '{print $2}')
          echo "ÔøΩ Latest deployment: $DEPLOYMENT_URL"

          # Inspect deployment status
          vercel inspect $DEPLOYMENT_URL --token=${{ secrets.VERCEL_TOKEN }}

          # Verify deployment is ready
          STATUS=$(vercel inspect $DEPLOYMENT_URL --token=${{ secrets.VERCEL_TOKEN }} | grep -i "state" | head -n 1)
          echo "ÔøΩ Deployment status: $STATUS"

          if echo "$STATUS" | grep -q "READY"; then
            echo "‚úÖ Deployment verification successful - site is ready"
          else
            echo "‚ùå Deployment verification failed - site is not ready"
            exit 1
          fi

      - name: Post-deployment monitoring
        if: always()
        run: |
          echo "üîÑ Starting post-deployment monitoring..."
          # Wait for deployment to complete
          sleep 60
          # Run deployment monitoring
          DEPLOYMENT_URL="https://voder.ai" npm run deploy:monitor || echo "::warning title=Deployment Monitoring::Post-deployment monitoring detected issues"

      - name: Upload deployment logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: |
            rollback.log
            deployment-monitor.log
