name: Deploy to Production
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_rollback:
        description: 'Skip automatic rollback on deployment failure'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - name: Quality Gates
        run: npm run verify
      # - name: Install Playwright Dependencies
      #   run: npx playwright install --with-deps
      # - name: E2E Tests (Pre-deployment)
      #   run: npm run e2e:ci
      - name: E2E Tests (DISABLED - Workaround for slow pipeline)
        run: echo "WARNING - E2E tests temporarily disabled for pipeline performance (Problem #012)"

  deploy:
    needs: quality-gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - name: Deploy to Netlify
        id: deploy
        run: |
          echo "üöÄ Starting deployment to Netlify..."

          # Deploy to Netlify production with site ID
          NETLIFY_OUTPUT=$(npx netlify deploy --prod --dir=dist --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --site=8e272de7-fb1a-4643-bcf0-6df07f143a9e --json 2>&1)
          DEPLOY_EXIT_CODE=$?

          if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Netlify deploy failed with exit code $DEPLOY_EXIT_CODE"
            echo "Output: $NETLIFY_OUTPUT"
            exit 1
          fi

          echo "‚úÖ Netlify deploy command completed"
          echo "Raw output: $NETLIFY_OUTPUT"

          # Parse deployment URL from JSON output
          DEPLOYMENT_URL=$(echo "$NETLIFY_OUTPUT" | jq -r '.url // .deploy_url // "unknown"' 2>/dev/null)

          if [ "$DEPLOYMENT_URL" = "unknown" ] || [ "$DEPLOYMENT_URL" = "null" ]; then
            echo "‚ö†Ô∏è  Could not parse JSON output, trying to extract URL manually"
            DEPLOYMENT_URL=$(echo "$NETLIFY_OUTPUT" | grep -oE 'https://[^[:space:]]+\.netlify\.app' | head -1 || echo "unknown")
          fi

          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment completed: $DEPLOYMENT_URL"
      - name: Comprehensive Deployment Verification
        id: verify
        env:
          SKIP_AUTO_ROLLBACK: ${{ inputs.skip_rollback || vars.SKIP_AUTO_ROLLBACK || 'false' }}
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment_url }}"

          echo "üîç Starting comprehensive deployment verification..."
          echo "üåê Deployment URL: $DEPLOYMENT_URL"
          echo "üîÑ Skip rollback setting: $SKIP_AUTO_ROLLBACK"

          if [ "$DEPLOYMENT_URL" = "unknown" ] || [ -z "$DEPLOYMENT_URL" ]; then
            echo "‚ùå Cannot verify deployment - URL is unknown"
            echo "rollback_needed=true" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Health check function
          health_check() {
            local check_num=$1
            echo "‚öïÔ∏è  Running health check $check_num/12..."
            
            # HTTP Status Check
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 "$DEPLOYMENT_URL" || echo "000")
            RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" --max-time 5 "$DEPLOYMENT_URL" || echo "999")
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "  ‚úÖ HTTP Status: $HTTP_CODE"
            else
              echo "  ‚ùå HTTP Status: $HTTP_CODE (expected 200)"
              return 1
            fi
            
            # Response Time Check
            if [ $(echo "$RESPONSE_TIME < 5.0" | bc -l 2>/dev/null || echo 0) = 1 ]; then
              echo "  ‚úÖ Response Time: ${RESPONSE_TIME}s"
            else
              echo "  ‚ùå Response Time: ${RESPONSE_TIME}s (expected <5s)"
              return 1
            fi
            
            # SSL Certificate Check (if HTTPS)
            if echo "$DEPLOYMENT_URL" | grep -q "https://"; then
              SSL_EXPIRY=$(curl -s --max-time 5 -vI "$DEPLOYMENT_URL" 2>&1 | grep "expire date" || echo "")
              if [ -n "$SSL_EXPIRY" ]; then
                echo "  ‚úÖ SSL Certificate: Valid"
              else
                echo "  ‚ö†Ô∏è  SSL Certificate: Could not verify (proceeding)"
              fi
            fi
            
            # Basic Content Check
            CONTENT=$(curl -s --max-time 5 "$DEPLOYMENT_URL" || echo "")
            if echo "$CONTENT" | grep -q "<title>" && echo "$CONTENT" | grep -q "</title>"; then
              echo "  ‚úÖ Basic HTML Content: Title tag found"
            else
              echo "  ‚ùå Basic HTML Content: No title tag found"
              return 1
            fi
            
            # Critical Asset Check (CSS)
            if echo "$CONTENT" | grep -q "\.css" || echo "$CONTENT" | grep -q "<style"; then
              echo "  ‚úÖ CSS Assets: Found CSS references"
            else
              echo "  ‚ö†Ô∏è  CSS Assets: No CSS found (proceeding)"
            fi
            
            # Basic Functionality Check (form exists)
            if echo "$CONTENT" | grep -q "<form" || echo "$CONTENT" | grep -q "email"; then
              echo "  ‚úÖ Basic Functionality: Email/form elements found"
            else
              echo "  ‚ö†Ô∏è  Basic Functionality: No form elements found (proceeding)"
            fi
            
            echo "  ‚úÖ Health check $check_num passed"
            return 0
          }

          # Run health checks for 2 minutes (12 checks with 10-second intervals)
          FAILED_CHECKS=0
          for i in {1..12}; do
            if health_check $i; then
              echo "‚úÖ Check $i/12 successful"
            else
              echo "‚ùå Check $i/12 failed"
              FAILED_CHECKS=$((FAILED_CHECKS + 1))
              
              # Fail fast if we have too many failures
              if [ $FAILED_CHECKS -ge 3 ]; then
                echo "‚ùå Too many health check failures ($FAILED_CHECKS/3)"
                echo "rollback_needed=true" >> $GITHUB_OUTPUT
                exit 1
              fi
            fi
            
            # Wait 10 seconds before next check (except for last check)
            if [ $i -lt 12 ]; then
              echo "‚è≥ Waiting 10 seconds before next check..."
              sleep 10
            fi
          done

          if [ $FAILED_CHECKS -eq 0 ]; then
            echo "üéâ All health checks passed! Deployment is healthy."
          else
            echo "‚ö†Ô∏è  Some health checks failed ($FAILED_CHECKS/12) but within tolerance"
          fi

      - name: E2E Tests (Post-deployment Validation)
        id: e2e-validation
        if: success()
        env:
          SKIP_AUTO_ROLLBACK: ${{ inputs.skip_rollback || vars.SKIP_AUTO_ROLLBACK || 'false' }}
        run: |
          echo "üß™ Running E2E tests against production deployment..."

          # Install Playwright if not already installed
          npx playwright install --with-deps

          # Run E2E tests against production
          if PREVIEW_URL=https://voder.ai npm run e2e:ci:prod; then
            echo "‚úÖ E2E tests passed! Production deployment validated."
          else
            echo "‚ùå E2E tests failed - production deployment has issues"
            echo "rollback_needed=true" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Automatic Rollback
        if: failure() && (steps.verify.outputs.rollback_needed == 'true' || steps.e2e-validation.outputs.rollback_needed == 'true') && env.SKIP_AUTO_ROLLBACK != 'true'
        run: |
          echo "üö® Deployment validation failed - initiating automatic rollback..."
          echo "‚è∞ Starting rollback process (target: <60 seconds)"

          START_TIME=$(date +%s)

          # Get list of deployments to find previous one
          echo "üîç Finding previous deployment..."
          DEPLOYMENTS=$(npx netlify api listSiteDeploys --site=8e272de7-fb1a-4643-bcf0-6df07f143a9e --auth=${{ secrets.NETLIFY_AUTH_TOKEN }})

          # Extract the second deployment (previous one) - first is current failed one
          PREVIOUS_DEPLOY_ID=$(echo "$DEPLOYMENTS" | jq -r '.[1].id' 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_DEPLOY_ID" ] || [ "$PREVIOUS_DEPLOY_ID" = "null" ]; then
            echo "‚ùå Could not find previous deployment for rollback"
            echo "Available deployments:"
            echo "$DEPLOYMENTS" | jq -r '.[] | "\(.id): \(.state) - \(.created_at)"' | head -5
            exit 1
          fi

          echo "üéØ Rolling back to deployment: $PREVIOUS_DEPLOY_ID"

          # Restore the previous deployment
          npx netlify api restoreSiteDeploy --site=8e272de7-fb1a-4643-bcf0-6df07f143a9e --deploy_id="$PREVIOUS_DEPLOY_ID" --auth=${{ secrets.NETLIFY_AUTH_TOKEN }}

          # Verify rollback was successful
          echo "‚úÖ Verifying rollback deployment health..."
          sleep 5  # Give it a moment to propagate

          ROLLBACK_URL="https://voder.ai"  # Production URL after rollback
          ROLLBACK_HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$ROLLBACK_URL" || echo "000")

          END_TIME=$(date +%s)
          ROLLBACK_DURATION=$((END_TIME - START_TIME))

          if [ "$ROLLBACK_HTTP_CODE" = "200" ]; then
            echo "‚úÖ Rollback successful! Site is responding normally."
            echo "‚è±Ô∏è  Rollback completed in ${ROLLBACK_DURATION} seconds"
          else
            echo "‚ùå Rollback verification failed - site returning HTTP $ROLLBACK_HTTP_CODE"
            echo "‚è±Ô∏è  Rollback attempted in ${ROLLBACK_DURATION} seconds"
            exit 1
          fi

          if [ $ROLLBACK_DURATION -le 60 ]; then
            echo "üéØ Rollback time target met: ${ROLLBACK_DURATION}s ‚â§ 60s"
          else
            echo "‚ö†Ô∏è  Rollback took longer than target: ${ROLLBACK_DURATION}s > 60s"
          fi

      - name: Rollback Skipped Notice
        if: failure() && (steps.verify.outputs.rollback_needed == 'true' || steps.e2e-validation.outputs.rollback_needed == 'true') && env.SKIP_AUTO_ROLLBACK == 'true'
        run: |
          echo "‚ö†Ô∏è  Deployment verification failed, but automatic rollback is disabled"
          echo "üîß SKIP_AUTO_ROLLBACK is set to: $SKIP_AUTO_ROLLBACK"
          echo "üìã Manual intervention required to fix or rollback the deployment"
