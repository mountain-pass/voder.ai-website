name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run verification pipeline
        run: npm run verify

      - name: Run screenshot tests
        run: npm run screenshots

      - name: Build for production
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/

  # Wait for all required workflows to complete before deploying
  check-required-workflows:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for CI & Playwright Tests
        uses: fountainhead/action-wait-for-check@v1.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: CI & Playwright multi-browser tests
          ref: ${{ github.sha }}
          timeoutSeconds: 1800
      - name: Wait for Security Audit
        uses: fountainhead/action-wait-for-check@v1.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Security Audit
          ref: ${{ github.sha }}
          timeoutSeconds: 600
      - name: Wait for Secret Scan
        uses: fountainhead/action-wait-for-check@v1.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Secret Scan (gitleaks)
          ref: ${{ github.sha }}
          timeoutSeconds: 600

  deploy-to-vercel:
    needs: check-required-workflows
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Setup Vercel Project
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "‚öôÔ∏è Setting up Vercel project configuration..."

          # Verify token is available
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "::error::VERCEL_TOKEN secret is not set"
            exit 1
          fi

          # Create .vercel directory if it doesn't exist
          mkdir -p .vercel

          # Create or update project.json with our known project details
          cat > .vercel/project.json << EOF
          {
            "projectId": "prj_LSFZ7QyiNnR7OUzg9Z3pAQOl3E4a",
            "orgId": "team_7sPaanDDRxhjnbF1NXGnhSWa"
          }
          EOF

          echo "‚úÖ Vercel project configuration ready"

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "üöÄ Starting deployment to production..."

          # Verify token is available
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "::error::VERCEL_TOKEN secret is not set"
            exit 1
          fi

          # Pull project configuration
          vercel pull --yes --environment=production --token="$VERCEL_TOKEN"

          # Build the project
          vercel build --prod --token="$VERCEL_TOKEN"

          # Deploy the built project
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token="$VERCEL_TOKEN")
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment completed: $DEPLOYMENT_URL"

      - name: Verify Deployment Success
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "üîç Verifying deployment success..."

          # Verify token is available
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "::error::VERCEL_TOKEN secret is not set"
            exit 1
          fi

          # Get the latest deployment
          echo "üìã Listing recent deployments..."
          vercel ls --token="$VERCEL_TOKEN" || {
            echo "::warning::Could not list deployments, but continuing..."
            return 0
          }

          # Basic verification that deployment exists
          echo "‚úÖ Deployment verification completed"

      - name: Post-deployment monitoring
        if: always()
        run: |
          echo "üîÑ Starting post-deployment monitoring..."
          # Wait for deployment to complete
          sleep 60
          # Run deployment monitoring
          DEPLOYMENT_URL="https://voder.ai" npm run deploy:monitor || echo "::warning title=Deployment Monitoring::Post-deployment monitoring detected issues"

      - name: Upload deployment logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: |
            rollback.log
            deployment-monitor.log
